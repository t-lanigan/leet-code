from typing import List

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
    	
    	# First test the rows
    	for row in board:
    		if self.isSetValid(row) == False:
    			print("False row: {}".format(row))
    			return False

    	# # Now test the columns
    	for i in range(0,9):
    		column = []
    		for x in board:
    			column.append(x[i])
    		if self.isSetValid(column) == False:
    			print("False column: {}".format(column))
    			return False

    	# Now test the cells.
    	for i in range(0,3):
    		for j in range(0,3):
    			cell = []
    			#Get the values
    			for x in range(i*3, i*3+3):
    				for y in range(j*3, j*3+3):
    					cell.append(board[x][y])

	    		if self.isSetValid(cell) == False:
	    			print("False cell: {}".format(cell))
	    			return False

    	# If all the tests are False return True.
    	return True

    def isSetValid(self, x: List[str]) -> bool:
    	"""Returns if a given set of is valid, i.e no duplicates
    	"""

    	print(x)

    	# First remove the periods
    	t = list(filter(lambda a: a != '.', x))
    	# Return if there are duplicates
    	return len(set(t)) == len(t)



board_true = \
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]

board_false_row = \
[["5","3","3",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]


board_false_column = \
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]


board_false_cell = \
[[".",".",".",".","5",".",".","1","."],
[".","4",".","3",".",".",".",".","."],
[".",".",".",".",".","3",".",".","1"],
["8",".",".",".",".",".",".","2","."],
[".",".","2",".","7",".",".",".","."],
[".","1","5",".",".",".",".",".","."],
[".",".",".",".",".","2",".",".","."],
[".","2",".","9",".",".",".",".","."],
[".",".","4",".",".",".",".",".","."]]


board_false_cell = \
[[".","4",".",".",".",".",".",".","."],
[".",".","4",".",".",".",".",".","."],
[".",".",".","1",".",".","7",".","."],
[".",".",".",".",".",".",".",".","."],
[".",".",".","3",".",".",".","6","."],
[".",".",".",".",".","6",".","9","."],
[".",".",".",".","1",".",".",".","."],
[".",".",".",".",".",".","2",".","."],
[".",".",".","8",".",".",".",".","."]]


sol = Solution()

print(sol.isValidSudoku(board_false))
